// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"fmt"
	"log"
	"time"
	"os"
	"gorm.io/gorm"
	"gorm.io/driver/postgres"

	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"github.com/T-jegou/myTravelNotebook/swagger_gen/restapi"
	"github.com/T-jegou/myTravelNotebook/swagger_gen/restapi/operations"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

type Travel struct {
	ID           int `gorm:"primaryKey;autoIncrement"`
	nameTravel	string
	descriptionTravel		string
	country		string
	CreatedAt    time.Time `gorm:"autoCreateTime"`
  }

func InitialMigration() {
	
	dsn := "host=localhost user=postgres password=postgrespw dbname=myTravel_notebook port=55000 sslmode=disable TimeZone=Asia/Shanghai"
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		fmt.Println(err.Error())
		panic("Failed to connect to database")
	}
	db.AutoMigrate(&Travel{})
}

func main() {

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewMyTravelNotebookAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "MyTravelBook"
	parser.LongDescription = "MyTravelBook is an application aim to provide a simple way to create a booktrip.\n"
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

	InitialMigration()

}

